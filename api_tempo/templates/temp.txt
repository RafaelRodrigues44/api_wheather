{% extends 'base.html' %}

{% block title %}Weather List{% endblock %}

{% block content %}
    <h2 style="text-align: center;">Pesquisar Registros</h2>
    <form method="GET" action="" id="search-form">
        <label for="search_input">Buscar por:</label>
        <select id="search_input" name="field">
            <option value="city">Cidade</option>
            <option value="temperature">Temperatura</option>
            <option value="atmosphericPressure">Pressão Atmosférica</option>
            <option value="humidity">Umidade</option>
            <option value="weather">Condição do Tempo</option>
            <option value="date">Data</option>
        </select>
        <input type="text" name="value">
        <button type="button" onclick="submitSearch()">Pesquisar</button>
    </form>

    <h2 style="text-align: center;">Registros</h2>
    <div class="weather-list-container">
        <ul class="weather-list">
            {% for record in weather_records %}
                <li class="weather-item">
                    <h3>{{ record.city }}</h3>
                    <p>Data: {{ record.date|date:"d/m/Y H:i:s" }}</p> 
                    <p>Temperatura: {{ record.temperature }}</p>
                    <p>Pressão: {{ record.atmosphericPressure }}</p> 
                    <p>Umidade: {{ record.humidity }}</p>
                    <p>Condição: {{ record.weather }}</p>
                    <div>
                        {% if record.id %}
                            <!-- Verifique se o registro possui um id válido -->
                            <button class="delete-btn btn btn-danger" data-pk="{{ record.id }}" data-delete-url="{% url 'weather-delete' pk=record.id %}">Excluir</button>
                        {% else %}
                            <!-- Se o registro não tiver um id válido, exiba uma mensagem -->
                            <p>id vazio</p>
                        {% endif %}
                    </div>
                </li>
            {% endfor %}
        </ul>
    </div>

    <script>  
        function submitSearch() {
            var searchInput = document.getElementById('search_input').value;
            var searchValue = document.getElementsByName('value')[0].value;
            var searchUrl = `/api_tempo/weather/${searchInput}/${searchValue}/`;
            document.getElementById('search-form').action = searchUrl;
            document.getElementById('search-form').submit();
        }

        // Restante do seu script JavaScript
        document.querySelectorAll('.edit-btn').forEach(function(button) {
            button.addEventListener('click', function() {
                var editUrl = button.dataset.editUrl;
                window.location.href = editUrl;
            });
        });

        document.querySelectorAll('.delete-btn').forEach(function(button) {
            button.addEventListener('click', function() {
                var deleteUrl = button.dataset.deleteUrl;
                if (confirm('Tem certeza que deseja excluir este registro?')) {
                    window.location.href = deleteUrl;
                }
            });
        });
    </script>
{% endblock %}




weather_field.html

{% extends 'base.html' %}

{% block title %}Search Results{% endblock %}

{% block content %}
<div class="container">
    <h2 class="text-center">Registros da Consulta</h2>
    
    <div class="weather-list-container">
        <ul class="weather-list">
            {% for record in weather_records %}
            <li class="weather-item card">
                <div class="card-body">
                    <h3 class="card-title">{{ record.city }}</h3>
                    <p class="card-text">Data: {{ record.date|date:"d/m/Y H:i:s" }}</p> 
                    <p class="card-text">Temperatura: {{ record.temperature }}</p>
                    <p class="card-text">Pressão: {{ record.atmosphericPressure }}</p> 
                    <p class="card-text">Umidade: {{ record.humidity }}</p>
                    <p class="card-text">Condição: {{ record.weather }}</p>
                    <div>
                        {% if record.id %}
                        <!-- Verifique se o registro possui um id válido -->
                        <button class="delete-btn btn btn-danger" data-pk="{{ record.id }}" data-delete-url="{% url 'weather-delete' pk=record.id %}">Delete</button>
                        {% else %}
                        <!-- Se o registro não tiver um id válido, exiba uma mensagem -->
                        <p>Empty ID</p>
                        {% endif %}
                    </div>
                </div>
            </li>
            {% endfor %}
        </ul>
    </div>
</div>

<style>
    .container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }

    .weather-item {
        margin-bottom: 20px;
    }
</style>

<script>  
    document.querySelectorAll('.delete-btn').forEach(function(button) {
        button.addEventListener('click', function() {
            var deleteUrl = button.dataset.deleteUrl;
            if (confirm('Are you sure you want to delete this record?')) {
                window.location.href = deleteUrl;
            }
        });
    });
</script>
{% endblock %}


repositorie

 def search(self, field, value):
        query = {}
        if field == '_id':
            query[field] = ObjectId(value)
        else:
            query[field] = self._convert_to_proper_type(value)
        collection = self.getColletion().find(query)
        serialized_results = [self.serialize_document(doc) for doc in collection]
        return serialized_results

    def serialize_document(self, document):
        serialized_doc = {}
        for key, value in document.items():
            if isinstance(value, ObjectId):
                serialized_doc[key] = str(value)
            else:
                serialized_doc[key] = value
        return serialized_doc

    def _convert_to_proper_type(self, value):
        try:
            return int(value)  
        except ValueError:
            try:
                return float(value)  
            except ValueError:
                return value
                



from django.shortcuts import render
from django.views.generic import View
from api_tempo.repositories import WeatherRepository

class SearchWeatherView(View):
    def get(self, request, field, value):  
        # Verifica se os parâmetros necessários foram fornecidos
        if field and value:
            repository = WeatherRepository(collectionName='weathers')  
            results = repository.search(field, value)
            print(results)

            # Renderiza o template com os resultados encontrados
            return render(request, 'weather_field.html', {'weather_records': results})
        else:
            # Retorna uma resposta de erro se os parâmetros estão ausentes
            return render(request, 'error.html', {'message': 'Parâmetros "field" e "value" são obrigatórios.'}, status=400)
